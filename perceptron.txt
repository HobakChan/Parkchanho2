import torch
import torch.nn as nn

device = 'cuda' if torch.cuda.is_available() else 'cpu'

X = torch.FloatTensor([
    [0,0],
    [0,1],
    [1,0],
    [1,1]
    ]).to(device)

Y = torch.FloatTensor([
        [0],[1],[1],[1]
    ]).to(device)

model = nn.Sequential(
    nn.Linear(2,1, bias = True),
    nn.Sigmoid()
).to(device)

loss_func = torch.nn.BCELoss().to(device)
optimizer = torch.optim.SGD(model.parameters(), lr = 0.01)

for step in range(20001):
    optimizer.zero_grad()

    Y_hat = model(X)
    loss = loss_func(Y_hat, Y)
    loss.backward()
    optimizer.step()

    if step % 1000 == 0:
        print(step, loss.item())

with torch.no_grad():
    model.eval()
    inputs = torch.FloatTensor([
        [0,0],
        [0,1],
        [1,0],
        [1,1]
    ]).to(device)
    outputs = model(inputs)

    print(outputs)
    print(outputs >0.5)
